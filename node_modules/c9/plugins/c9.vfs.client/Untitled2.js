/**
 * Smith.io client
 *
 * @copyright 2010, Ajax.org B.V.
 */

define(function(require, exports, module) {
    "use strict";
    
    main.consumes = ["Plugin", "auth", "vfs.endpoint", "dialog.error", "dialog.alert"];
    main.provides = ["vfs"];
    return main;

    /**
     * login flow
     * 
     * init:
     *  - receive list of VFS servers
     *  - choose one of the servers (based on some metric)
     *  - create VFS connection to that VFS server and remember the ID in sessionStorage
     * 
     * offline:
     *  - ping a stable URL to detect if it is a network error
     *  - if it is a network error try to reconnect to the same VFS server with the same ID
     *  - if it is not a network error pick another server
     */

    function main(options, imports, register) {
        var Plugin = imports.Plugin;
        var auth = imports.auth;
        var vfsEndpoint = imports["vfs.endpoint"];
        var showError = imports["dialog.error"].show;
        var hideError = imports["dialog.error"].hide;
        var showAlert = imports["dialog.alert"].show;
        
        var URL = require("url");

        // The connected vfs unique id
        var id;

        /***** Initialization *****/
        
        var plugin = new Plugin("Ajax.org", main.consumes);
        var emit = plugin.getEmitter();
        
        
        var withInstall = options.withInstall;
        var dashboardUrl = options.dashboardUrl;
        var homeUrl, projectUrl, pingUrl, serviceUrl;
        var eioOptions, connection, consumer, vfs;
        var showErrorTimer, showErrorTimerMessage;
        var lastError;
        
        var loaded = false;
        function load(){
            if (loaded) return false;
            loaded = true;
            
            connection = plugin;
        }
        
        /***** Methods *****/
        
        function join(a, b) {
            return (a || "").replace(/\/?$/, "/") + (b || "").replace(/^\//, "");
        }
        
        function vfsUrl(path) {
            // resolve home and project url
            return path.charAt(0) == "~"
                ? join(homeUrl, escape(path.slice(1)))
                : join(projectUrl, escape(path));
        }
        
        var fsData = Object.create(null);
        
        function rest(path, options, callback) {
            console.log(path, options, callback);
            if (options.method == "PUT") {
                setTimeout(function() {
                    fsData[path] = options.body;
                    callback(null, 0);
                }, 10);
            } else if (options.method == "GET") {
                setTimeout(function() {
                    var data = fsData[path];
                    callback(null, data);
                }, 10);
            } else {
                debugger;
            }
        }
        
        function download(path, filename, isfile) {}


        function showVfsError(err) {}


        function vfsCall(method, path, options, callback) {
            if (Array.isArray(method))
                return vfsCall.apply(null, method);
            setTimeout(function() {
                var err, result;
                if (method == "rmfile") {
                    if (!fsData[path]) {
                        err = {code: "ENOENT", message: ""};
                    } else {
                        delete fsData[path];
                    }
                } else if (method == "rmdir") {
                    debugger
                }  else if (method == "rmdir") {
                    debugger
                } 
                callback(err, res);
            }, 10)
        }
        
        /***** Lifecycle *****/
        
        plugin.on("load", function(){
            load();
        });
        plugin.on("unload", function(){
            loaded = false;
        });
        
        /***** Register and define API *****/
        

        plugin.freezePublicAPI({
            
            get connection(){ return connection; },
            get connecting(){ return false; },
            get connected(){ return true; },
            
            get previewUrl(){ throw new Error("gone") },
            get serviceUrl(){ return serviceUrl; },
            get id() { return id; },
            
            /**
             * Performs a VFS REST API call
             * @param path      {String} Path of the resource. Can be prefixed 
             *                           with '~' to resolve the path relative 
             *                           to the user's home dir
             * @param options   {Object} Same format as 'http.request'
             * @param callback(err, data) {Function}
             */
            rest: rest,
            download: download,
            url: vfsUrl,

            // File management
            resolve: vfsCall.bind(null, "resolve"),
            stat: vfsCall.bind(null, "stat"),
            readfile: vfsCall.bind(null, "readfile"),
            readdir: vfsCall.bind(null, "readdir"),
            mkfile: vfsCall.bind(null, "mkfile"),
            mkdir: vfsCall.bind(null, "mkdir"),
            mkdirP: vfsCall.bind(null, "mkdirP"),
            appendfile: vfsCall.bind(null, "appendfile"),
            rmfile: vfsCall.bind(null, "rmfile"),
            rmdir: vfsCall.bind(null, "rmdir"),
            rename: vfsCall.bind(null, "rename"),
            copy: vfsCall.bind(null, "copy"),
            chmod: vfsCall.bind(null, "chmod"),
            symlink: vfsCall.bind(null, "symlink"),

            // Retrieve Metadata
            metadata: vfsCall.bind(null, "metadata"),

            // Wrapper around fs.watch or fs.watchFile
            watch: vfsCall.bind(null, "watch"),

            // Network connection
            connect: vfsCall.bind(null, "connect"),

            // Process Management
            spawn: vfsCall.bind(null, "spawn"),
            pty: vfsCall.bind(null, "pty"),
            tmux: vfsCall.bind(null, "tmux"),
            execFile: vfsCall.bind(null, "execFile"),

            // Extending the API
            use: vfsCall.bind(null, "use"),
            extend: vfsCall.bind(null, "extend"),
            unextend: vfsCall.bind(null, "unextend")
        });
        
        register(null, {
            "vfs": plugin
        });
    }
});